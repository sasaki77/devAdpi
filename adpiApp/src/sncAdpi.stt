program sncAdpi /* Program Name */

%%#include "sncAdpi.h"

unsigned int getGain(unsigned short gain_index)
{
    if( gain_index <= 7  ){
        return 0x01 << gain_index;
    }else{
	printf("gain_index = %u is not supported.\n", gain_index);
	printf("Check gain setting\n");
        return 0x01;
    }
}

unsigned int getGainFlag(unsigned short gain_index)
{
    if( gain_index <= 7 ){
        return gain_index << 8;
    }else{
	printf("gain_index = %u is not supported.\n", gain_index);
	printf("Check gain setting\n");
        return ADPI_GAIN_1;
    }
}

unsigned int getRate(unsigned int rate_index)
{
    if( rate_index == 1 ){
        return 500;
    }else if( rate_index == 2 ){
        return 250;
    }else if( rate_index == 3 ){
        return 125;
    }else if( rate_index == 4 ){
        return 62;
    }else if( rate_index == 5 ){
        return 50;
    }else if( rate_index == 6 ){
        return 39;
    }else if( rate_index == 7 ){
        return 33;
    }else if( rate_index == 8 ){
        return 19;
    }else if( rate_index == 9 ){
        return 17;
    }else if( rate_index == 10 ){
        return 16;
    }else if( rate_index == 11 ){
        return 12;
    }else if( rate_index == 12 ){
        return 10;
    }else if( rate_index == 13 ){
        return 8;
    }else if( rate_index == 14 ){
        return 6;
    }else if( rate_index == 15 ){
        return 4;
    }else{
	printf("rate_index = %u is not supported.\n", rate_index);
	printf("Check rate setting\n");
        return 4;
    }
}

unsigned int getRateFlag(unsigned int rate_index)
{
    if( rate_index == 1 ){
        return ADPI_RATE_500;
    }else if( rate_index == 2 ){
        return ADPI_RATE_250;
    }else if( rate_index == 3 ){
        return ADPI_RATE_125;
    }else if( rate_index == 4 ){
        return ADPI_RATE_62;
    }else if( rate_index == 5 ){
        return ADPI_RATE_50;
    }else if( rate_index == 6 ){
        return ADPI_RATE_39;
    }else if( rate_index == 7 ){
        return ADPI_RATE_33;
    }else if( rate_index == 8 ){
        return ADPI_RATE_19;
    }else if( rate_index == 9 ){
        return ADPI_RATE_17;
    }else if( rate_index == 10 ){
        return ADPI_RATE_16;
    }else if( rate_index == 11 ){
        return ADPI_RATE_12;
    }else if( rate_index == 12 ){
        return ADPI_RATE_10;
    }else if( rate_index == 13 ){
        return ADPI_RATE_8;
    }else if( rate_index == 14 ){
        return ADPI_RATE_6;
    }else if( rate_index == 15 ){
        return ADPI_RATE_4;
    }else{
	printf("rate_index = %u is not supported.\n", rate_index);
	printf("Check rate setting\n");
        return ADPI_RATE_4;
    }
}

/* read ch */
unsigned long  status;
unsigned short mode;
unsigned short config;
unsigned long  data;
unsigned short num_chs;
unsigned short gain_index[4];
unsigned int   rate_index;
unsigned int   rate;

assign status        to "{head}:STATUS";
assign mode          to "{head}:MODE";
assign config        to "{head}:CONFIG";
assign data          to "{head}:DATA";
assign num_chs       to "{head}:NUMCHS";
assign gain_index[0] to "{head}:SETGAIN1";
assign gain_index[1] to "{head}:SETGAIN2";
assign gain_index[2] to "{head}:SETGAIN3";
assign gain_index[3] to "{head}:SETGAIN4";
assign rate_index    to "{head}:SETRATE";

monitor gain_index[0];
monitor gain_index[1];
monitor gain_index[2];
monitor gain_index[3];
monitor rate_index;

/* write ch */
unsigned short mode_w;
unsigned short config_w;
unsigned long  update_status = 1;
unsigned short update_mode   = 1;
unsigned short update_config = 1;
unsigned long  update_data   = 1;
float vin[4];

assign mode_w        to "{head}:MODEw";
assign config_w      to "{head}:CONFIGw";
assign update_status to "{head}:STATUS.PROC";
assign update_mode   to "{head}:MODE.PROC";
assign update_config to "{head}:CONFIG.PROC";
assign update_data   to "{head}:DATA.PROC";
assign vin[0]        to "{head}:V1";
assign vin[1]        to "{head}:V2";
assign vin[2]        to "{head}:V3";
assign vin[3]        to "{head}:V4";

/* internal variable */
short ch = 0;
float measure_delay;

unsigned short gain;
unsigned int gain_flag;
float gain_scale;

unsigned int rate_flag;

/* State Set */
ss ss1 {
    state init {
        when () {
	    pvGet(num_chs);

	    rate      = getRate(rate_index);
	    rate_flag = getRateFlag(rate_index);

	    config_w = ADPI_VBIAS_DSB | ADPI_BO_DSB | ADPI_POLAR_BI | 
		       ADPI_GAIN_1 | ADPI_REFSEL_EXT1 | ADPI_REFDET_DSB |
		       ADPI_BUF_DSB;

	    mode_w   = ADPI_MODE_POWERDOWN | ADPI_PSW_DSB | ADPI_AMPCM_DSB |
		       ADPI_CLK_INT1 | ADPI_CHOP_ENB | rate_flag;

	    pvPut(config_w);
	    pvPut(mode_w);

	    measure_delay = 2.0 * 1.0 / rate + 0.01;
	    //printf("measure_delay = %.9f\n",measure_delay);
	    //printf("gain_scale = %.9f\n",gain_scale);
	} state init_measure
    }

    state init_measure {
        entry {
            //printf("sncAdpi: Init Measure\n");
            if(ch <= ADPI_CH_4) {
                gain = getGain(gain_index[ch]);
	        gain_flag = getGainFlag(gain_index[ch]);
	        gain_scale = ADPI_VREF / (0x800000 * gain) ;
	    }else{
	        printf("gain setting error on ch%u\n",ch);
	    }

	    config_w = (config_w & 0xf8f8) | gain_flag | (ch & 0x0007);
	    mode_w = (mode_w & 0x1fff) | ADPI_MODE_SINGLE;
	    pvPut(config_w, SYNC);
	    pvPut(mode_w, SYNC);

	    pvPut(update_config);
	    pvPut(update_mode);
        }
        when ( delay(measure_delay) ) {
	    pvPut(update_status, SYNC);
	    pvGet(status);
        } state wait_measure
    }

    state wait_measure {
	when ( !(status & ADPI_STS_RDY) ) {
            //printf("sncAdpi: Measure complete\n");
	    pvPut(update_data, SYNC);
	} state measure
        when ( delay(measure_delay) ) {
            //printf("sncAdpi: Measure wait\n");
	    pvPut(update_status, SYNC);
	    pvGet(status);
        } state wait_measure 
    }

    state measure {
        entry {
	    pvGet(data);
            if(ch <= ADPI_CH_4) {
	        vin[ch] = gain_scale * (long)(data - ADPI_BI_OFFSET);
	        //printf("v%u = %f\n",ch,vin[ch]);
	        pvPut(vin[ch]);
	    }else{
	        printf("measure error on ch%u\n",ch);
	    }
        }
        when () {
            //printf("sncAdpi: End\n");
	    ch = (ch >= (num_chs-1))? 0 : ch+1;
        } state init_measure
    }
}
